import streamlit as st
from datetime import datetime
from PIL import Image
import os
import torch
import numpy as np
import cv2
import segmentation_models_pytorch as smp

from model_set import predict_mask, draw_contour_on_image

st.set_page_config(page_title="–ú–∞–º–º–æ–≥—Ä–∞–º–º–∞", layout="wide")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    model = smp.UnetPlusPlus(
        encoder_name="timm-efficientnet-b2",
        encoder_weights=None,
        in_channels=1,
        classes=1,
    )
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    model.load_state_dict(torch.load('unet_best_7828.pth', map_location=device))
    model = model.to(device)
    return model

model = load_model()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
upload_image = False
show_predict = False
original_image_name = ''
image_np = None
annotated_image = None
new_size = None

with st.sidebar:
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["png", "jpg", "jpeg"])

col1, col2 = st.columns([2, 1])

with col1:
    if uploaded_file is not None:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        image = Image.open(uploaded_file).convert('L')  # grayscale
        image_np = np.array(image)  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array

        st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–∞–º–º–æ–≥—Ä–∞–º–º–∞", use_container_width=True)

        if st.sidebar.button("üîÆ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å"):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑..."):
                try:
                    # –¢–µ–ø–µ—Ä—å –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ numpy array, –∞ –Ω–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                    image_resized, pred_mask = predict_mask(model, image=image_np, device='cpu')
                    annotated_image = draw_contour_on_image(image_resized, pred_mask)

                    st.markdown("###### –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
                    st.image(annotated_image, use_container_width=True, channels="BGR")

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")

with col2:
    st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ")

    with st.form(key="patient_form"):
        full_name = st.text_input("–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        birth_date = st.date_input("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", value=None, format="DD/MM/YYYY")
        visit_date = st.date_input("–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞", value=None, format="DD/MM/YYYY")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ/–∑–∞–º–µ—Ç–∫–∏ –≤—Ä–∞—á–∞", height=200)

        submit_button = st.form_submit_button(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    if submit_button:
        data = []
        if full_name:
            data.append(f"–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞: {full_name}")
        if birth_date:
            data.append(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d-%m-%Y')}")
        if visit_date:
            data.append(f"–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞: {visit_date.strftime('%d-%m-%Y')}")
        if description:
            data.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")

        if data:
            file_content = "\n".join(data)
            file_name = f"patient_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            st.session_state.file_content = file_content
            st.session_state.file_name = file_name

            st.success(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –∏—Ö –Ω–∏–∂–µ.")
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if 'file_content' in locals() or 'file_content' in globals():
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
            data=file_content,
            file_name=file_name,
            mime="text/plain"
        )